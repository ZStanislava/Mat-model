#include <iostream>
#include <iomanip>
#include <deque>
#include <locale.h>
#include <time.h>
using namespace std;

double f(double x1, double x2) {
	return x1 * x1 + x2 * x2 - 8 * x1 + 4 * x2; 
}

double fl_x1(double x1, double x2) { // Производная по х1
	return 2 * x1 - 8;
}

double fl_x2(double x1, double x2) { // Производная по х2
	return 2 * x2 + 4;
}

double fogr(double x1, double x2) { // Ограничение
	return (x1 - 1) * (x1 - 1) + (x2 - 1) * (x2 - 1) - 1;
}

double fogr_x1(double x1, double x2) { // Производная по х1 
	return 2 * x1 - 2;
}

double fogr_x2(double x1, double x2) { // Производная по х2
	return 2 * x2 - 2;
}

double max(double a, double b) {
	return a >= b ? a : b; //если a>=b ,то a
}

double norm(double x1, double x2) {
	return sqrt(pow(x1, 2) + pow(x2, 2));
}

double H(double x1, double x2) {  
	return pow(max(fogr(x1, x2), 0), 2); 
}

double dH_x1(double x1, double x2) {
	if (fogr(x1, x2) <= 0) {
		return 0;
	}
	return 2 * fogr(x1, x2) * fogr_x1(x1, x2);
}

double dH_x2(double x1, double x2) {
	if (fogr(x1, x2) <= 0) {
		return 0;
	}
	return 2 * fogr(x1, x2) * fogr_x2(x1, x2);
}

double a(double k) {            //к=n
	return k * k;
}

double Fk(double x1, double x2, int k) {
	return f(x1, x2) + a(k) * H(x1, x2);
}

// Для нахождения s
double methodGoldenRatio(double x1, double x2, double g1, double g2, double epsilon1, int k) {
	double a = 0;
	double b = 1;
	double x1_a = x1 - a * g1;
	double x2_a = x2 - a * g2;
	double x1_b = x1 - b * g1;
	double x2_b = x2 - b * g2;
	while (Fk(x1_a, x2_a, k) > Fk(x1_b, x2_b, k)) {
		b *= 2;
		x1_b = x1 - b * g1;
		x2_b = x2 - b * g2;
	}

	double lambda = (1 + sqrt(5)) / 2;
	double delta = (b - a) / (lambda * lambda);

	double x = a + delta;
	double y = b - delta;

	double x1_x = x1 - x * g1;
	double x2_x = x2 - x * g2;
	double x1_y = x1 - y * g1;
	double x2_y = x2 - y * g2;

	while (b - a > epsilon1 * 2) {
		if (Fk(x1_x, x2_x, k) < Fk(x1_y, x2_y, k)) {
			b = y;
			y = x;
			x = a + b - y;
		}
		else {
			a = x;
			x = y;
			y = a + b - x;
		}
		x1_x = x1 - x * g1;
		x2_x = x2 - x * g2;
		x1_y = x1 - y * g1;
		x2_y = x2 - y * g2;
	}

	return (a + b) / 2;
}

int main() {
	setlocale(LC_ALL, "rus");

	double epsilon1 = 0.00001;
	double epsilon2 = 0.0001;

	double x1, x2;
	x1 = 2;
	x2 = 2;

	// Для вывода значений до определённой точности
	int n = -1;
	double eps = epsilon1;
	while (eps < 10) {
		n++;
		eps *= 10;
	}

	int k = 1;
	while (H(x1, x2) >= epsilon2) {      //условие выхода
		cout << "Итерация: " << k << endl;

		// Метод скорейшего спуска:
		double g1 = fl_x1(x1, x2) + a(k) * dH_x1(x1, x2);
		double g2 = fl_x2(x1, x2) + a(k) * dH_x2(x1, x2);
		int i = 0;
		while (norm(g1, g2) > epsilon1) {
			double s = methodGoldenRatio(x1, x2, g1, g2, epsilon1 / 100, k);
			x1 = x1 - s * g1;
			x2 = x2 - s * g2;
			g1 = fl_x1(x1, x2) + a(k) * dH_x1(x1, x2);
			g2 = fl_x2(x1, x2) + a(k) * dH_x2(x1, x2);
			i++;
		}

		cout << "Количество итераций в методе скорейшего спуска: " << i << endl;
		cout << "z: " << roundf(x1 * pow(10, n)) / (pow(10, n)) << "; " << roundf(x2 * pow(10, n)) / (pow(10, n)) << endl;
		cout << "H(x) = " << roundf(H(x1, x2) * pow(10, n)) / (pow(10, n)) << endl << endl;

		k++;
	}

	cout << "z: " << roundf(x1 * pow(10, n)) / (pow(10, n)) << "; " << roundf(x2 * pow(10, n)) / (pow(10, n)) << endl;
}